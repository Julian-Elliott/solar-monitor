version: '3.8'

services:
  # TimescaleDB Database
  timescaledb:
    image: timescale/timescaledb:2.14.2-pg16
    container_name: solarscope-timescaledb
    restart: unless-stopped
    environment:
      POSTGRES_DB: solarscope_pro
      POSTGRES_USER: solarscope
      POSTGRES_PASSWORD: ${TIMESCALE_PASSWORD:-solarscope_password}
      TIMESCALEDB_TELEMETRY: 'off'
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./scripts/timescale_queries.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U solarscope -d solarscope_pro"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - solarscope-network

  # SolarScope Pro API
  solarscope-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: solarscope-api
    restart: unless-stopped
    environment:
      - TIMESCALE_HOST=timescaledb
      - TIMESCALE_PORT=5432
      - TIMESCALE_USER=solarscope
      - TIMESCALE_PASSWORD=${TIMESCALE_PASSWORD:-solarscope_password}
      - TIMESCALE_DATABASE=solarscope_pro
      - DEBUG=false
      - LOG_LEVEL=INFO
      - SCAN_INTERVAL=1.0
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-change-in-production}
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
      - /dev/i2c-1:/dev/i2c-1  # For hardware I2C access (if available)
    depends_on:
      timescaledb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - solarscope-network

  # Redis for caching (optional, for future scaling)
  redis:
    image: redis:7-alpine
    container_name: solarscope-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - solarscope-network

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: solarscope-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # Mount SSL certificates here
    depends_on:
      - solarscope-api
    networks:
      - solarscope-network
    profiles:
      - production  # Only run with --profile production

volumes:
  timescale_data:
    driver: local
  redis_data:
    driver: local

networks:
  solarscope-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
