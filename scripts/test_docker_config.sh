#!/bin/bash
# Test script to validate Docker configuration

echo "üß™ Testing Docker configuration..."

# Check if Dockerfile exists and is valid
if [ -f "Dockerfile" ]; then
    echo "‚úÖ Dockerfile found"
    
    # Check for common Dockerfile issues
    if grep -q "FROM python:3.11-slim" Dockerfile; then
        echo "‚úÖ Valid base image"
    else
        echo "‚ùå Invalid or missing base image"
    fi
    
    if grep -q "WORKDIR /app" Dockerfile; then
        echo "‚úÖ Working directory set"
    else
        echo "‚ùå Working directory not set"
    fi
    
    if grep -q "COPY requirements.txt" Dockerfile; then
        echo "‚úÖ Requirements copied before app code (good caching)"
    else
        echo "‚ö†Ô∏è  Requirements not copied separately"
    fi
    
    if grep -q "HEALTHCHECK" Dockerfile; then
        echo "‚úÖ Health check configured"
    else
        echo "‚ö†Ô∏è  No health check found"
    fi
else
    echo "‚ùå Dockerfile not found"
    exit 1
fi

# Check docker-compose.yml
if [ -f "docker-compose.yml" ]; then
    echo "‚úÖ docker-compose.yml found"
    
    # Check for required services
    if grep -q "timescaledb:" docker-compose.yml; then
        echo "‚úÖ TimescaleDB service configured"
    else
        echo "‚ùå TimescaleDB service missing"
    fi
    
    if grep -q "solarscope-api:" docker-compose.yml; then
        echo "‚úÖ API service configured"
    else
        echo "‚ùå API service missing"
    fi
    
    if grep -q "healthcheck:" docker-compose.yml; then
        echo "‚úÖ Health checks configured"
    else
        echo "‚ö†Ô∏è  No health checks in compose"
    fi
    
    if grep -q "networks:" docker-compose.yml; then
        echo "‚úÖ Custom network configured"
    else
        echo "‚ö†Ô∏è  Using default network"
    fi
else
    echo "‚ùå docker-compose.yml not found"
    exit 1
fi

# Check .dockerignore
if [ -f ".dockerignore" ]; then
    echo "‚úÖ .dockerignore found"
    
    if grep -q "__pycache__" .dockerignore; then
        echo "‚úÖ Python cache ignored"
    else
        echo "‚ö†Ô∏è  Python cache not ignored"
    fi
    
    if grep -q "venv/" .dockerignore; then
        echo "‚úÖ Virtual environment ignored"
    else
        echo "‚ö†Ô∏è  Virtual environment not ignored"
    fi
else
    echo "‚ö†Ô∏è  .dockerignore not found"
fi

# Check environment files
if [ -f "config/.env.production" ]; then
    echo "‚úÖ Production environment template found"
else
    echo "‚ö†Ô∏è  Production environment template missing"
fi

# Check deployment script
if [ -f "scripts/deploy.sh" ] && [ -x "scripts/deploy.sh" ]; then
    echo "‚úÖ Deployment script found and executable"
else
    echo "‚ö†Ô∏è  Deployment script missing or not executable"
fi

# Check requirements.txt
if [ -f "requirements.txt" ]; then
    echo "‚úÖ Requirements file found"
    
    if grep -q "fastapi" requirements.txt; then
        echo "‚úÖ FastAPI dependency found"
    else
        echo "‚ùå FastAPI dependency missing"
    fi
    
    if grep -q "uvicorn" requirements.txt; then
        echo "‚úÖ Uvicorn dependency found"
    else
        echo "‚ùå Uvicorn dependency missing"
    fi
    
    if grep -q "gunicorn" requirements.txt; then
        echo "‚úÖ Gunicorn for production found"
    else
        echo "‚ö†Ô∏è  Gunicorn for production missing"
    fi
    
    if grep -q "asyncpg" requirements.txt; then
        echo "‚úÖ AsyncPG database driver found"
    else
        echo "‚ùå AsyncPG database driver missing"
    fi
else
    echo "‚ùå requirements.txt not found"
    exit 1
fi

echo ""
echo "üéâ Docker configuration validation complete!"
echo ""
echo "üìã Next steps:"
echo "  1. Install Docker and Docker Compose"
echo "  2. Copy config/.env.production to config/.env"
echo "  3. Edit config/.env with your settings"
echo "  4. Run: ./scripts/deploy.sh dev"
echo ""
echo "üîó Useful commands:"
echo "  ./scripts/deploy.sh dev      # Start development environment"
echo "  ./scripts/deploy.sh prod     # Start production environment"
echo "  ./scripts/deploy.sh logs     # View logs"
echo "  ./scripts/deploy.sh status   # Check status"
